# A sample implementation of wieners attack on RSA for a small private part d. 
# Uses continius fractions and the chinese rest theorem (CSR) to calculate d. (if d < 1/3 n^(1/4))
# author: CountyblyInfinite

from decimal import *
from timeit import default_timer as timer

# another example for e
"""e = Decimal(
'445676824769085666231766965007573215387813406607163598025295890847055918888839410837414438974940245910691051025133246949629672617470367432533956711121061499291642697741969774037402835168082614558381104476818031985377281945675223823459884975875364079048365654639827408032367651208935933864199701850675482624701886900215477896841743947329763597534528545537563735385823031565557121742884568683454152092086742733264822625295247190097735476087591786298870017157551607963572360158597779546803686775574763831309749613334570401687712552715809114567000226134169078134904470144934345666726514622648252035408741097320201382015376570113038378691792508874446134801557781760720531126169465623170366659025656588198082903284412019424062584909024824973447056823781780524094769894664314962111807100802162756862781108385937631698593429708323403424444369536331305085832631934977397854266212941140001564900586442842183714813399552860955121171807601102305596910758822235360959532065327026225200745423048406282722565354047774539714215494141891909679289721021789910399510831203482223248274998993962353226253531310303936362283979149614062977307686458384976751106628076278890370914464833649891422006007358168811808150846235000649470501640166872374009060973473')"""
e = Decimal('35735496112177664226849181788896300444915672717990075901560234019560163051776536650473840572699274245725346796046943297976063358613420538318461257195495298090249018747374534536319654697500258721994272994869848409359843187329822415640505212002954578203553726542633315098905299178007728720018932159892581692066597618537709790598303110975651568050460518237668850739327020443210435099277984405689155610348807528082973888177365366311413006090730478933755886832863452102280263610607348566993045606777353753845744058268043590300321759276189473237693866699735279935629704088137717294429314076288381583640782474244845289025289470710680234087921594091025408840702216965503072885787815772635253473255849508954552771678476221299018821568968395560768223890160264628959386101331485428847772251449095953325495706133682831263672602301356027570168435189296600881147371853437490977539233945456813224102602262523731192624886706252305796001770053157466088102456634241199187600515310681466882215087326775294125429493536228062526686548532555124370910682770436791040012743985912057135076251741780910979910543059466711861027809020288152625151533536792428353246126376458814794733793593336970398197413064496610631541247189091007599567050577347301674710963989')
n = Decimal('707394576529221780281698028232049547514437569116340051435791155205703651155676155680591670794397163871372230831536875886119638031754794633712228650441777851273344332330236693656799942078242439096939269656023815989965389364827249787311467223636322006505031240206596484384046470265924783183774663603480724261929948214565797406764770478957392029344160748096277900847195059813802787301124387934306969379004331763380399137659835676857236374336461683184040792309383863674222372674110503224966655853980220324837661913516777438009387686300217533092213461374546836370240597236342024992982697719169253902750851666143716104944149790274594570968261360586168924140633104933995964707407680695130945029805857710257500568103721403253920734308262908456927798481346161965857278611910837454673430630719116956258446879036207911711468131315719313553819180415804046573197980347263561735520033043629701735450627796946723618368099855486105838377350794630575901033232118456856685450326738736085062544469979951058067066896396651352138421661325070156271822427489721142136859501769634962709959921485182702193262869025771410187830893460128813786446796742061770515192121198613714287528667062443701181548160439973561175978045861407738766656689323004927113993529559')

def extendedeuclid(a, b):
    x0, x1, y0, y1 = 1, 0, 0, 1
    denom = []
    while b != 0:
        q, a, b = a // b, b, a % b
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
        denom.append(q)
    return  denom

def calc_approx_frac(cfrac):
    A = [None] * (len(cfrac) - 1)
    B = [None] * (len(cfrac) - 1)
    count = 0
    while (count < (len(cfrac) - 1)):  
        if(count == 0 and cfrac[count] < 1):
            A[count] = 0
            B[count] = 1
        elif(count == 0 and cfrac[count] > 1):
            A[count] = cfrac[count]
            B[count] = 1
        elif(count == 1):    
            A[count] = (cfrac[count] * A[0] + 1)
            B[count] = (cfrac[count] * B[0] + 0)
        elif(count > 1):
            A[count] = (cfrac[count] * A[count - 1] + A[count - 2])
            B[count] = (cfrac[count] * B[count - 1] + B[count - 2])
        count += 1   
    if(A[0] == 0):
        A.pop(0)
        B.pop(0)
    return A, B

def check_if_odd(B):
    if(B % 2 == 0):
        return False
    return True

def calc_C(A, B):
    C = Decimal((e * B - 1) / A)
    if(check_whole_number(C)):
        return C
    else:
        return -1
    
def check_whole_number(x):
        if(x % 1 == 0):
            return True
        else:
            return False
            
def solve_quad_equ(C): 
    ph=Decimal((n-C+1)/2)
    x1=ph-Decimal(ph**2-n).sqrt()
    x2=ph+Decimal(ph**2-n).sqrt()
    if(check_whole_number(x1) and check_whole_number(x2)):
        print("Found a solution: \np=",x1,"\nq=",x2)
        return True
    return False
        
def wiener(A, B):
    count = 0
    while(count <= (len(B)-1)):
        if check_if_odd(B[count]):
            C = calc_C(A[count], B[count])
            if(C > -1):
                if(solve_quad_equ(C)):
                    print("d=",B[count])
                    return True        
        count += 1
    return False

start = timer()
getcontext().prec=10000
cfrac = extendedeuclid(e, n)
A, B = calc_approx_frac(cfrac)
if not(wiener(A, B)):
    print("Could not find a solution.")
end = timer()
print ("\nExecuted in",end - start,"seconds")